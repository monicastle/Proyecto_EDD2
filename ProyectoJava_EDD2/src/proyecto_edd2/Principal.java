/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto_edd2;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.RandomAccessFile;
import java.util.Random;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Monica
 */
public class Principal extends javax.swing.JFrame {

    Random random = new Random();

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        VentanaMenuCampos = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TA_ArchivoAbierto = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        BTN_SalvarArchivo = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        BTN_AbrirCrearCampo = new javax.swing.JButton();
        BTN_AbrirModificarCampo = new javax.swing.JButton();
        BTN_AbrirBorrarCampo = new javax.swing.JButton();
        BTN_AbrirListarCampos = new javax.swing.JButton();
        BTN_CerrarArchivo = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        JD_CrearCampos = new javax.swing.JDialog();
        jP_CrearCampo = new javax.swing.JPanel();
        JL_5 = new javax.swing.JLabel();
        JL_8 = new javax.swing.JLabel();
        CB_TipoDeDatoDelCampo = new javax.swing.JComboBox<>();
        JL_9 = new javax.swing.JLabel();
        SP_LongitudDelCampo = new javax.swing.JSpinner();
        JL_6 = new javax.swing.JLabel();
        TF_NombreDelCampo = new javax.swing.JTextField();
        JL_7 = new javax.swing.JLabel();
        RB_LlavePrimariaDelCampo = new javax.swing.JRadioButton();
        JL_10 = new javax.swing.JLabel();
        BTN_CrearCampoDefinitivo = new javax.swing.JButton();
        BTN_CancelarCrearCampo = new javax.swing.JButton();
        JD_ModificarCampos = new javax.swing.JDialog();
        jPanel9 = new javax.swing.JPanel();
        JL_12 = new javax.swing.JLabel();
        JL_11 = new javax.swing.JLabel();
        JL_13 = new javax.swing.JLabel();
        CB_CampoAModificar = new javax.swing.JComboBox<>();
        JL_14 = new javax.swing.JLabel();
        TF_NombreDelCampoModificado = new javax.swing.JTextField();
        JL_16 = new javax.swing.JLabel();
        CB_TipoDeDatoDelCampoModificado = new javax.swing.JComboBox<>();
        JL_15 = new javax.swing.JLabel();
        SP_LongitudDelCampoModificado = new javax.swing.JSpinner();
        RB_LlavePrimariaDelCampoModificado = new javax.swing.JRadioButton();
        JL_17 = new javax.swing.JLabel();
        BTN_ModificarCampoDefinitivo = new javax.swing.JButton();
        BTN_CancelarModificarCampo = new javax.swing.JButton();
        JD_BorrarCampos = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        JL_19 = new javax.swing.JLabel();
        JL_18 = new javax.swing.JLabel();
        CB_CampoABorrar = new javax.swing.JComboBox<>();
        JL_20 = new javax.swing.JLabel();
        JL_21 = new javax.swing.JLabel();
        BTN_BorrarCampoDefinitivo = new javax.swing.JButton();
        BTN_CancelarBorrarCampo = new javax.swing.JButton();
        JD_ListarCampos = new javax.swing.JDialog();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TA_ListarCampos = new javax.swing.JTextArea();
        JL_22 = new javax.swing.JLabel();
        BTN_CancelarListarCampos = new javax.swing.JButton();
        JL_23 = new javax.swing.JLabel();
        JL_24 = new javax.swing.JLabel();
        Crear_registros = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_registros = new javax.swing.JTable();
        jb_insertarcolumna = new javax.swing.JButton();
        jb_defcrearregistro = new javax.swing.JButton();
        jb_salirdecrearregistros = new javax.swing.JButton();
        jl_titulodelatabla = new javax.swing.JLabel();
        Buscar_registrso = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        Tabla_buscarregistro = new javax.swing.JTable();
        cb_buscar_registro = new javax.swing.JComboBox<>();
        tf_buscarregistro = new javax.swing.JTextField();
        jb_botondefbuscar = new javax.swing.JButton();
        jD_Registros = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        btn_crearRegistros = new javax.swing.JButton();
        btn_buscarRegistros = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        JL_32 = new javax.swing.JLabel();
        JL_33 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        Modificar_Registros = new javax.swing.JDialog();
        modificar_textfield = new javax.swing.JTextField();
        label_llaveaingresar = new javax.swing.JLabel();
        jb_buscarllave_mod = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tabla_modregistros = new javax.swing.JTable();
        jb_defmodificar = new javax.swing.JButton();
        jb_salir_modificar = new javax.swing.JButton();
        PanelPrincipal = new javax.swing.JPanel();
        JL_1 = new javax.swing.JLabel();
        BTN_SalirPrograma = new javax.swing.JButton();
        JL_2 = new javax.swing.JLabel();
        BTN_AbrirArchivo = new javax.swing.JButton();
        BTN_CrearNuevoArchivo = new javax.swing.JButton();
        JL_3 = new javax.swing.JLabel();
        JL_4 = new javax.swing.JLabel();

        VentanaMenuCampos.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        VentanaMenuCampos.setTitle("Menú Campos");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        TA_ArchivoAbierto.setColumns(20);
        TA_ArchivoAbierto.setRows(5);
        TA_ArchivoAbierto.setEnabled(false);
        jScrollPane1.setViewportView(TA_ArchivoAbierto);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Archivo Abierto");

        BTN_SalvarArchivo.setText("Salvar Archivo");
        BTN_SalvarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SalvarArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTN_SalvarArchivo)
                .addGap(182, 182, 182))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BTN_SalvarArchivo)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("¿Que desea hacer?");

        BTN_AbrirCrearCampo.setText("Crear un Campo");
        BTN_AbrirCrearCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_AbrirCrearCampoActionPerformed(evt);
            }
        });

        BTN_AbrirModificarCampo.setText("Modificar un Campo");
        BTN_AbrirModificarCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_AbrirModificarCampoActionPerformed(evt);
            }
        });

        BTN_AbrirBorrarCampo.setText("Borrar un Campo");
        BTN_AbrirBorrarCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_AbrirBorrarCampoActionPerformed(evt);
            }
        });

        BTN_AbrirListarCampos.setText("Listar Campos");
        BTN_AbrirListarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_AbrirListarCamposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BTN_AbrirModificarCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BTN_AbrirCrearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(50, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(BTN_AbrirListarCampos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BTN_AbrirBorrarCampo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(50, 50, 50))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(71, 71, 71)
                .addComponent(BTN_AbrirCrearCampo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BTN_AbrirModificarCampo)
                .addGap(25, 25, 25)
                .addComponent(BTN_AbrirBorrarCampo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BTN_AbrirListarCampos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BTN_CerrarArchivo.setText("Cerrar Archivo");
        BTN_CerrarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CerrarArchivoActionPerformed(evt);
            }
        });

        jButton7.setText("Registros");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(29, 29, 29))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(433, 433, 433)
                .addComponent(BTN_CerrarArchivo)
                .addGap(161, 161, 161)
                .addComponent(jButton7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(BTN_CerrarArchivo))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)))
                .addContainerGap())
        );

        javax.swing.GroupLayout VentanaMenuCamposLayout = new javax.swing.GroupLayout(VentanaMenuCampos.getContentPane());
        VentanaMenuCampos.getContentPane().setLayout(VentanaMenuCamposLayout);
        VentanaMenuCamposLayout.setHorizontalGroup(
            VentanaMenuCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VentanaMenuCamposLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        VentanaMenuCamposLayout.setVerticalGroup(
            VentanaMenuCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        JD_CrearCampos.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        JD_CrearCampos.setTitle("Crear Campo");

        jP_CrearCampo.setBackground(new java.awt.Color(255, 255, 255));

        JL_5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        JL_5.setText("Crear Campo");

        JL_8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JL_8.setText("Tipo de dato del campo");

        CB_TipoDeDatoDelCampo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CB_TipoDeDatoDelCampo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "int", "byte", "short", "double", "float", "long", "char", "string", "boolean" }));
        CB_TipoDeDatoDelCampo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        JL_9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JL_9.setText("Longitud del Campo");

        SP_LongitudDelCampo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SP_LongitudDelCampo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        JL_6.setForeground(new java.awt.Color(204, 204, 204));
        JL_6.setText("__________________________________________________________________");

        TF_NombreDelCampo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        TF_NombreDelCampo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        JL_7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JL_7.setText("Nombre del campo");

        RB_LlavePrimariaDelCampo.setBackground(new java.awt.Color(255, 255, 255));
        RB_LlavePrimariaDelCampo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RB_LlavePrimariaDelCampo.setText("Llave Primaria");

        JL_10.setForeground(new java.awt.Color(204, 204, 204));
        JL_10.setText("__________________________________________________________________");

        BTN_CrearCampoDefinitivo.setBackground(new java.awt.Color(255, 51, 0));
        BTN_CrearCampoDefinitivo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTN_CrearCampoDefinitivo.setForeground(new java.awt.Color(255, 255, 255));
        BTN_CrearCampoDefinitivo.setText("Crear");
        BTN_CrearCampoDefinitivo.setBorder(null);
        BTN_CrearCampoDefinitivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CrearCampoDefinitivoActionPerformed(evt);
            }
        });

        BTN_CancelarCrearCampo.setBackground(new java.awt.Color(204, 204, 204));
        BTN_CancelarCrearCampo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTN_CancelarCrearCampo.setText("Cancelar");
        BTN_CancelarCrearCampo.setBorder(null);
        BTN_CancelarCrearCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CancelarCrearCampoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jP_CrearCampoLayout = new javax.swing.GroupLayout(jP_CrearCampo);
        jP_CrearCampo.setLayout(jP_CrearCampoLayout);
        jP_CrearCampoLayout.setHorizontalGroup(
            jP_CrearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JL_6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jP_CrearCampoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jP_CrearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JL_5)
                    .addGroup(jP_CrearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(JL_9)
                        .addComponent(JL_8)
                        .addComponent(TF_NombreDelCampo)
                        .addComponent(JL_7)
                        .addComponent(CB_TipoDeDatoDelCampo, 0, 356, Short.MAX_VALUE))
                    .addGroup(jP_CrearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(SP_LongitudDelCampo, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(RB_LlavePrimariaDelCampo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jP_CrearCampoLayout.createSequentialGroup()
                .addComponent(JL_10)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_CrearCampoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTN_CancelarCrearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BTN_CrearCampoDefinitivo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jP_CrearCampoLayout.setVerticalGroup(
            jP_CrearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_CrearCampoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JL_5)
                .addGap(0, 0, 0)
                .addComponent(JL_6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(JL_7)
                .addGap(11, 11, 11)
                .addComponent(TF_NombreDelCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(JL_8)
                .addGap(11, 11, 11)
                .addComponent(CB_TipoDeDatoDelCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(JL_9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SP_LongitudDelCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RB_LlavePrimariaDelCampo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JL_10)
                .addGap(16, 16, 16)
                .addGroup(jP_CrearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BTN_CrearCampoDefinitivo, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(BTN_CancelarCrearCampo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout JD_CrearCamposLayout = new javax.swing.GroupLayout(JD_CrearCampos.getContentPane());
        JD_CrearCampos.getContentPane().setLayout(JD_CrearCamposLayout);
        JD_CrearCamposLayout.setHorizontalGroup(
            JD_CrearCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jP_CrearCampo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JD_CrearCamposLayout.setVerticalGroup(
            JD_CrearCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jP_CrearCampo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        JD_ModificarCampos.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        JD_ModificarCampos.setTitle("Modificar Campo");

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        JL_12.setForeground(new java.awt.Color(204, 204, 204));
        JL_12.setText("_______________________________________________________________________");

        JL_11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        JL_11.setText("Modificar Campo");

        JL_13.setForeground(new java.awt.Color(102, 102, 102));
        JL_13.setText("Seleccione el campo que le gustaría modificar");

        CB_CampoAModificar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CB_CampoAModificar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        CB_CampoAModificar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CB_CampoAModificarItemStateChanged(evt);
            }
        });

        JL_14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JL_14.setText("Nombre del campo");

        TF_NombreDelCampoModificado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        TF_NombreDelCampoModificado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        JL_16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JL_16.setText("Longitud del campo");

        CB_TipoDeDatoDelCampoModificado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CB_TipoDeDatoDelCampoModificado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "int", "byte", "short", "double", "float", "long", "char", "string", "boolean" }));
        CB_TipoDeDatoDelCampoModificado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        JL_15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JL_15.setText("Tipo de dato del campo");

        SP_LongitudDelCampoModificado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SP_LongitudDelCampoModificado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        RB_LlavePrimariaDelCampoModificado.setBackground(new java.awt.Color(255, 255, 255));
        RB_LlavePrimariaDelCampoModificado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RB_LlavePrimariaDelCampoModificado.setText("Llave Primaria");

        JL_17.setForeground(new java.awt.Color(204, 204, 204));
        JL_17.setText("_______________________________________________________________________");

        BTN_ModificarCampoDefinitivo.setBackground(new java.awt.Color(255, 51, 0));
        BTN_ModificarCampoDefinitivo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTN_ModificarCampoDefinitivo.setForeground(new java.awt.Color(255, 255, 255));
        BTN_ModificarCampoDefinitivo.setText("Modificar");
        BTN_ModificarCampoDefinitivo.setBorder(null);
        BTN_ModificarCampoDefinitivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_ModificarCampoDefinitivoActionPerformed(evt);
            }
        });

        BTN_CancelarModificarCampo.setBackground(new java.awt.Color(204, 204, 204));
        BTN_CancelarModificarCampo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTN_CancelarModificarCampo.setText("Cancelar");
        BTN_CancelarModificarCampo.setBorder(null);
        BTN_CancelarModificarCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CancelarModificarCampoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RB_LlavePrimariaDelCampoModificado)
                    .addComponent(JL_15)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(JL_14)
                        .addComponent(CB_CampoAModificar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JL_11)
                        .addComponent(JL_13, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                        .addComponent(CB_TipoDeDatoDelCampoModificado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TF_NombreDelCampoModificado)
                        .addComponent(SP_LongitudDelCampoModificado)
                        .addComponent(JL_16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JL_17, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JL_12, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTN_CancelarModificarCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BTN_ModificarCampoDefinitivo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(JL_11)
                .addGap(0, 0, 0)
                .addComponent(JL_12)
                .addGap(18, 18, 18)
                .addComponent(JL_13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CB_CampoAModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(JL_14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TF_NombreDelCampoModificado, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(JL_15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CB_TipoDeDatoDelCampoModificado, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(JL_16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SP_LongitudDelCampoModificado, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RB_LlavePrimariaDelCampoModificado)
                .addGap(0, 0, 0)
                .addComponent(JL_17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BTN_ModificarCampoDefinitivo, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(BTN_CancelarModificarCampo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        javax.swing.GroupLayout JD_ModificarCamposLayout = new javax.swing.GroupLayout(JD_ModificarCampos.getContentPane());
        JD_ModificarCampos.getContentPane().setLayout(JD_ModificarCamposLayout);
        JD_ModificarCamposLayout.setHorizontalGroup(
            JD_ModificarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        JD_ModificarCamposLayout.setVerticalGroup(
            JD_ModificarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        JD_BorrarCampos.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        JD_BorrarCampos.setTitle("Borrar Campo");

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        JL_19.setForeground(new java.awt.Color(204, 204, 204));
        JL_19.setText("_______________________________________________________________________");

        JL_18.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        JL_18.setText("Borrar Campo");

        CB_CampoABorrar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CB_CampoABorrar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        CB_CampoABorrar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CB_CampoABorrarItemStateChanged(evt);
            }
        });

        JL_20.setForeground(new java.awt.Color(102, 102, 102));
        JL_20.setText("Seleccione el campo que le gustaría borrar");

        JL_21.setForeground(new java.awt.Color(204, 204, 204));
        JL_21.setText("_______________________________________________________________________");

        BTN_BorrarCampoDefinitivo.setBackground(new java.awt.Color(255, 51, 0));
        BTN_BorrarCampoDefinitivo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTN_BorrarCampoDefinitivo.setForeground(new java.awt.Color(255, 255, 255));
        BTN_BorrarCampoDefinitivo.setText("Borrar");
        BTN_BorrarCampoDefinitivo.setBorder(null);
        BTN_BorrarCampoDefinitivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_BorrarCampoDefinitivoActionPerformed(evt);
            }
        });

        BTN_CancelarBorrarCampo.setBackground(new java.awt.Color(204, 204, 204));
        BTN_CancelarBorrarCampo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTN_CancelarBorrarCampo.setText("Cancelar");
        BTN_CancelarBorrarCampo.setBorder(null);
        BTN_CancelarBorrarCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CancelarBorrarCampoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JL_20, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                    .addComponent(JL_18)
                    .addComponent(CB_CampoABorrar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JL_21, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JL_19, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTN_CancelarBorrarCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BTN_BorrarCampoDefinitivo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(JL_18)
                .addGap(2, 2, 2)
                .addComponent(JL_19)
                .addGap(18, 18, 18)
                .addComponent(JL_20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CB_CampoABorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(JL_21)
                .addGap(11, 11, 11)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BTN_BorrarCampoDefinitivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_CancelarBorrarCampo, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        javax.swing.GroupLayout JD_BorrarCamposLayout = new javax.swing.GroupLayout(JD_BorrarCampos.getContentPane());
        JD_BorrarCampos.getContentPane().setLayout(JD_BorrarCamposLayout);
        JD_BorrarCamposLayout.setHorizontalGroup(
            JD_BorrarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        JD_BorrarCamposLayout.setVerticalGroup(
            JD_BorrarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        JD_ListarCampos.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        JD_ListarCampos.setTitle("Listar Campos");

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        TA_ListarCampos.setColumns(20);
        TA_ListarCampos.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        TA_ListarCampos.setRows(5);
        TA_ListarCampos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        TA_ListarCampos.setEnabled(false);
        jScrollPane2.setViewportView(TA_ListarCampos);

        JL_22.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        JL_22.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        JL_22.setText("Listado de Campos");

        BTN_CancelarListarCampos.setBackground(new java.awt.Color(204, 204, 204));
        BTN_CancelarListarCampos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTN_CancelarListarCampos.setText("Cancelar");
        BTN_CancelarListarCampos.setBorder(null);
        BTN_CancelarListarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CancelarListarCamposActionPerformed(evt);
            }
        });

        JL_23.setForeground(new java.awt.Color(204, 204, 204));
        JL_23.setText("_______________________________________________________________________");

        JL_24.setForeground(new java.awt.Color(204, 204, 204));
        JL_24.setText("_______________________________________________________________________");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JL_23, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JL_24, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JL_22, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(BTN_CancelarListarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JL_22)
                .addGap(0, 0, 0)
                .addComponent(JL_23, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(JL_24, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BTN_CancelarListarCampos, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout JD_ListarCamposLayout = new javax.swing.GroupLayout(JD_ListarCampos.getContentPane());
        JD_ListarCampos.getContentPane().setLayout(JD_ListarCamposLayout);
        JD_ListarCamposLayout.setHorizontalGroup(
            JD_ListarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JD_ListarCamposLayout.setVerticalGroup(
            JD_ListarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JD_ListarCamposLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tabla_registros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla_registros);

        jb_insertarcolumna.setText("Insertar registro en la tabla");
        jb_insertarcolumna.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_insertarcolumnaMouseClicked(evt);
            }
        });

        jb_defcrearregistro.setText("Crear registro");
        jb_defcrearregistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_defcrearregistroMouseClicked(evt);
            }
        });
        jb_defcrearregistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_defcrearregistroActionPerformed(evt);
            }
        });

        jb_salirdecrearregistros.setText("Salir de crear registros");
        jb_salirdecrearregistros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_salirdecrearregistrosMouseClicked(evt);
            }
        });

        jl_titulodelatabla.setFont(new java.awt.Font("Segoe UI Emoji", 1, 13)); // NOI18N
        jl_titulodelatabla.setText("Registros");

        javax.swing.GroupLayout Crear_registrosLayout = new javax.swing.GroupLayout(Crear_registros.getContentPane());
        Crear_registros.getContentPane().setLayout(Crear_registrosLayout);
        Crear_registrosLayout.setHorizontalGroup(
            Crear_registrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Crear_registrosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jb_salirdecrearregistros)
                .addGap(248, 248, 248))
            .addGroup(Crear_registrosLayout.createSequentialGroup()
                .addGroup(Crear_registrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Crear_registrosLayout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(Crear_registrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(Crear_registrosLayout.createSequentialGroup()
                                .addComponent(jb_insertarcolumna)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jb_defcrearregistro))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(Crear_registrosLayout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jl_titulodelatabla)))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        Crear_registrosLayout.setVerticalGroup(
            Crear_registrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Crear_registrosLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jl_titulodelatabla)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(Crear_registrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_insertarcolumna)
                    .addComponent(jb_defcrearregistro))
                .addGap(18, 18, 18)
                .addComponent(jb_salirdecrearregistros)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        Tabla_buscarregistro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(Tabla_buscarregistro);

        jb_botondefbuscar.setText("Buscar");
        jb_botondefbuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_botondefbuscarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout Buscar_registrsoLayout = new javax.swing.GroupLayout(Buscar_registrso.getContentPane());
        Buscar_registrso.getContentPane().setLayout(Buscar_registrsoLayout);
        Buscar_registrsoLayout.setHorizontalGroup(
            Buscar_registrsoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Buscar_registrsoLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(Buscar_registrsoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Buscar_registrsoLayout.createSequentialGroup()
                        .addComponent(cb_buscar_registro, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_buscarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(121, 121, 121)
                        .addComponent(jb_botondefbuscar))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        Buscar_registrsoLayout.setVerticalGroup(
            Buscar_registrsoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Buscar_registrsoLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(Buscar_registrsoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_buscar_registro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_buscarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_botondefbuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );

        jD_Registros.setTitle("Menú Registros");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btn_crearRegistros.setBackground(new java.awt.Color(255, 51, 0));
        btn_crearRegistros.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_crearRegistros.setForeground(new java.awt.Color(255, 255, 255));
        btn_crearRegistros.setText("Crear Registro");
        btn_crearRegistros.setBorder(null);
        btn_crearRegistros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_crearRegistrosMouseClicked(evt);
            }
        });

        btn_buscarRegistros.setBackground(new java.awt.Color(255, 51, 0));
        btn_buscarRegistros.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_buscarRegistros.setForeground(new java.awt.Color(255, 255, 255));
        btn_buscarRegistros.setText("Buscar Registro");
        btn_buscarRegistros.setBorder(null);
        btn_buscarRegistros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarRegistrosActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Menú Registros");

        JL_32.setForeground(new java.awt.Color(204, 204, 204));
        JL_32.setText("____________________________________________________________________");

        JL_33.setForeground(new java.awt.Color(204, 204, 204));
        JL_33.setText("____________________________________________________________________");

        jButton2.setBackground(new java.awt.Color(255, 51, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Modificar Registro");
        jButton2.setBorder(null);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 51, 0));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Borrar Registro");

        jButton6.setBackground(new java.awt.Color(255, 51, 0));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Listar Registros");

        jButton8.setBackground(new java.awt.Color(255, 51, 0));
        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Cruzar Archivos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JL_32)
                    .addComponent(JL_33))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_crearRegistros, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                    .addComponent(btn_buscarRegistros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addGap(0, 0, 0)
                .addComponent(JL_32)
                .addGap(20, 20, 20)
                .addComponent(btn_crearRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btn_buscarRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JL_33)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jD_RegistrosLayout = new javax.swing.GroupLayout(jD_Registros.getContentPane());
        jD_Registros.getContentPane().setLayout(jD_RegistrosLayout);
        jD_RegistrosLayout.setHorizontalGroup(
            jD_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jD_RegistrosLayout.setVerticalGroup(
            jD_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        modificar_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificar_textfieldActionPerformed(evt);
            }
        });

        label_llaveaingresar.setText("Ingrese la llave que desea modificar");

        jb_buscarllave_mod.setText("Buscar llave a modificar");
        jb_buscarllave_mod.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_buscarllave_modMouseClicked(evt);
            }
        });

        Tabla_modregistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(Tabla_modregistros);

        jb_defmodificar.setText("Modificar Registro");
        jb_defmodificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_defmodificarMouseClicked(evt);
            }
        });

        jb_salir_modificar.setText("Salir");

        javax.swing.GroupLayout Modificar_RegistrosLayout = new javax.swing.GroupLayout(Modificar_Registros.getContentPane());
        Modificar_Registros.getContentPane().setLayout(Modificar_RegistrosLayout);
        Modificar_RegistrosLayout.setHorizontalGroup(
            Modificar_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Modificar_RegistrosLayout.createSequentialGroup()
                .addGroup(Modificar_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Modificar_RegistrosLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(label_llaveaingresar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modificar_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_buscarllave_mod))
                    .addGroup(Modificar_RegistrosLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Modificar_RegistrosLayout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(jb_defmodificar)
                        .addGap(166, 166, 166)
                        .addComponent(jb_salir_modificar)))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        Modificar_RegistrosLayout.setVerticalGroup(
            Modificar_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Modificar_RegistrosLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(Modificar_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modificar_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_llaveaingresar)
                    .addComponent(jb_buscarllave_mod))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(Modificar_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_defmodificar)
                    .addComponent(jb_salir_modificar))
                .addContainerGap(115, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Menú Archivos");

        PanelPrincipal.setBackground(new java.awt.Color(255, 255, 255));

        JL_1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        JL_1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JL_1.setText("¡Bienvenido!");

        BTN_SalirPrograma.setBackground(new java.awt.Color(204, 204, 204));
        BTN_SalirPrograma.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTN_SalirPrograma.setText("Salir");
        BTN_SalirPrograma.setBorder(null);
        BTN_SalirPrograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SalirProgramaActionPerformed(evt);
            }
        });

        JL_2.setForeground(new java.awt.Color(204, 204, 204));
        JL_2.setText("____________________________________________________________________");

        BTN_AbrirArchivo.setBackground(new java.awt.Color(255, 51, 0));
        BTN_AbrirArchivo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTN_AbrirArchivo.setForeground(new java.awt.Color(255, 255, 255));
        BTN_AbrirArchivo.setText("Abrir un Archivo");
        BTN_AbrirArchivo.setBorder(null);
        BTN_AbrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_AbrirArchivoActionPerformed(evt);
            }
        });

        BTN_CrearNuevoArchivo.setBackground(new java.awt.Color(255, 51, 0));
        BTN_CrearNuevoArchivo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTN_CrearNuevoArchivo.setForeground(new java.awt.Color(255, 255, 255));
        BTN_CrearNuevoArchivo.setText("Crear un Nuevo Archivo");
        BTN_CrearNuevoArchivo.setBorder(null);
        BTN_CrearNuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CrearNuevoArchivoActionPerformed(evt);
            }
        });

        JL_3.setForeground(new java.awt.Color(102, 102, 102));
        JL_3.setText("¿Que le gustaría hacer?");

        JL_4.setForeground(new java.awt.Color(204, 204, 204));
        JL_4.setText("____________________________________________________________________");

        javax.swing.GroupLayout PanelPrincipalLayout = new javax.swing.GroupLayout(PanelPrincipal);
        PanelPrincipal.setLayout(PanelPrincipalLayout);
        PanelPrincipalLayout.setHorizontalGroup(
            PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPrincipalLayout.createSequentialGroup()
                .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JL_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JL_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JL_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(PanelPrincipalLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BTN_AbrirArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTN_CrearNuevoArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PanelPrincipalLayout.createSequentialGroup()
                        .addComponent(JL_3, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPrincipalLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTN_SalirPrograma, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(154, 154, 154))
        );
        PanelPrincipalLayout.setVerticalGroup(
            PanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPrincipalLayout.createSequentialGroup()
                .addComponent(JL_1)
                .addGap(0, 0, 0)
                .addComponent(JL_2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(JL_3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BTN_CrearNuevoArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(BTN_AbrirArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(JL_4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(BTN_SalirPrograma, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTN_SalirProgramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SalirProgramaActionPerformed
        // SALIR DEL PROGRAMA DEFINITIVAMENTE

        System.exit(0);
    }//GEN-LAST:event_BTN_SalirProgramaActionPerformed

    private void BTN_CrearNuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CrearNuevoArchivoActionPerformed
        // CREA UN NUEVO ARCHIVO DE TEXTO
        try {
            Boolean existe = false;
            JFileChooser directorio = new JFileChooser();
            directorio.setApproveButtonText("Guardar");
            int seleccion = directorio.showOpenDialog(null);
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                File archivo = new File(directorio.getSelectedFile() + ".txt");
                BufferedWriter salida = new BufferedWriter(new FileWriter(archivo));
                salida.close();
                // CARGADO DE ARCHIVOS A EL ARCHIVO BINARIO
                // OJO: Aqui falta una validación la cual no permita que se pueda nombrar un archivo con el mismo nombre que uno ya existente
                int ID;
                aa.cargarArchivo();
                for (int i = 0; i < aa.getLista_archivos().size(); i++) {
                    if (aa.getLista_archivos().get(i).getArchivo().getName().equals(archivo.getName())) {
                        existe = true;
                    }
                }
                if (existe == false) {
                    ID = aa.GenerarId();
                    archivo_actual = new Archivo(archivo, ID);
                    GuardarArchivo = archivo.getName();
                    System.out.println(GuardarArchivo);
                    aa.AddArchivo(archivo_actual);
                    aa.escribirArchivo();
                    archivo_actual = null;
                    JOptionPane.showMessageDialog(null, "¡Se ha creado su archivo exitosamente!");
                } else {
                    JOptionPane.showMessageDialog(null, "No se puede crear el archivo porque ya existe");
                }
            } // Fin If
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_CrearNuevoArchivoActionPerformed

    private void BTN_AbrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_AbrirArchivoActionPerformed
        // DESPLIEGA UN DIRECTORIO QUE ABRE UN ARCHIVO A ELECCIÓN DEL USUARIO
        try {
            // VALIDACIÓN: SI INGRESO EL NOMBRE DE UN ARCHIVO QUE NO EXISTE TIRA ERROR 
            File archivo_abrir = null;
            FileReader fr = null;
            BufferedReader br = null;
            TA_ArchivoAbierto.setText("");
            JFileChooser filechooser = new JFileChooser("./");
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo de Texto", "txt");
            FileNameExtensionFilter filtro2 = new FileNameExtensionFilter("Imagenes", "jpg", "png", "bmp");
            filechooser.setFileFilter(filtro);
            filechooser.addChoosableFileFilter(filtro2);
            int seleccion = filechooser.showOpenDialog(null);
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                archivo_abrir = filechooser.getSelectedFile();
                GuardarArchivo = archivo_abrir.getName();
                boolean valid = false;
                aa.cargarArchivo();
                for (int i = 0; i < aa.getLista_archivos().size(); i++) {
                    if (aa.getLista_archivos().get(i).getArchivo().equals(archivo_abrir)) {
                        valid = true;
                        archivo_actual = aa.getLista_archivos().get(i);
                        formatear_CBbox_Modificar();
                        formatear_CBbox_borrar();
                        listar_campos();
                        System.out.println(GuardarArchivo);
                        for (int j = 0; j < archivo_actual.getCampos().size(); j++) {
                            campos_nuevos.add(archivo_actual.getCampos().get(j));
                        } // Fin For
                        // temp = archivo_actual.getCampos();
                        //archivo_anterior = archivo_actual;
                        //System.out.println("abriendo " + archivo_actual.getCampos().size());
                        break;
                    } // Fin If
                } // Fin For
                if (!valid) {
                    // Esto indica que se abrio un archivo que no fue creado despues de las modificaciones, por lo que hay que registrarlo
                    // CARGADO DE ARCHIVOS A EL ARCHIVO BINARIO
                    // OJO: Aqui falta una validación la cual no permita que se pueda nombrar un archivo con el mismo nombre que uno ya existente
                    int ID;
                    aa.cargarArchivo();
                    ID = aa.GenerarId();
                    archivo_actual = new Archivo(archivo_abrir, ID);
                    GuardarArchivo = null;
                    // AQUI FALTA SETEARLE LOS CAMPOS
                    aa.AddArchivo(archivo_actual);
                    aa.escribirArchivo();
                    formatear_CBbox_Modificar();
                    formatear_CBbox_borrar();
                    listar_campos();
                    GuardarArchivo = archivo_actual.getArchivo().getName();
                    System.out.println(GuardarArchivo);
                } // Fin If
                fr = new FileReader(archivo_abrir);
                br = new BufferedReader(fr);
                String linea;
                TA_ArchivoAbierto.append("");
                while ((linea = br.readLine()) != null) {
                    TA_ArchivoAbierto.append(linea);
                    TA_ArchivoAbierto.append("\n");
                } // Fin While
                try {
                    br.close();
                    fr.close();
                } catch (Exception e) {
                    e.printStackTrace();
                } // Fin Try Catch
                salvado = false;
                this.setVisible(false);
                VentanaMenuCampos.pack();
                VentanaMenuCampos.setLocationRelativeTo(null);
                VentanaMenuCampos.setVisible(true);
            } // Fin If
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se puede abrir el archivo porque no existe");
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_AbrirArchivoActionPerformed

    private void BTN_SalvarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SalvarArchivoActionPerformed
        // ACTUALIZA EL TEXT AREA QUE MUESTRA EL ARCHIVO
        try {
            // Actualiza el text area
            FileReader fr = null;
            BufferedReader br = null;
            fr = new FileReader(archivo_actual.getArchivo());
            br = new BufferedReader(fr);
            TA_ArchivoAbierto.setText("");
            String linea;
            while ((linea = br.readLine()) != null) {
                TA_ArchivoAbierto.append(linea);
            } // Fin While
            try {
                br.close();
                fr.close();
            } catch (Exception e) {
                e.printStackTrace();
            } // Fin Try Catch
            // Actualiza el file dentro del archivo binario
            EscribirCamposBinario();
            formatear_CBbox_Modificar();
            formatear_CBbox_borrar();
            listar_campos();
            System.out.println("secreo:" + secreo + "seborro: " + seborro + "semodifico: " + semodifico);
            if (secreo == true || semodifico == true || seborro == true) {
                JOptionPane.showMessageDialog(null, "Archivo Salvado Exitosamente");
            }
            secreo = false;
            semodifico = false;
            seborro = false;
            salvado = false;
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_SalvarArchivoActionPerformed

    private void BTN_CerrarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CerrarArchivoActionPerformed
        // CIERRA EL ARCHIVO Y PREGUNTA SI SE DESEA GUARDAR O NO
        try {
            // ME FALTA PROBAR SI FUNCIONA CON LOS CRUDS
            if (salvado == true) {
                if (JOptionPane.showConfirmDialog(null, "¿Desea salvar los cambios en el archivo?", "Confirmación", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    // Actualiza el text area
                    FileReader fr = null;
                    BufferedReader br = null;
                    fr = new FileReader(archivo_actual.getArchivo());
                    br = new BufferedReader(fr);
                    TA_ArchivoAbierto.setText("");
                    String linea;
                    while ((linea = br.readLine()) != null) {
                        TA_ArchivoAbierto.append(linea);
                    } // Fin While
                    try {
                        br.close();
                        fr.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    } // Fin Try Catch
                    // Actualiza el file dentro del archivo binario
                    EscribirCamposBinario();
                    JOptionPane.showMessageDialog(this, "¡Se ha guardado el archivo exitosamente!");
                    /*if (GuardarArchivo != null) {
                        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                            if (archivo_actual.getCampos().get(i).isLlavePrimaria()) {
                                try {
                                    escribirArbol(GuardarArchivo + archivo_actual.getCampos().get(i).getNombre(), arboles.get(i));
                                } catch (Exception ex) {
                                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                        try {
                            writeAvailList();
                        } catch (IOException ex) {
                            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }*/
                } else {
                    FileWriter fw = null;
                    BufferedWriter bw = null;
                    fw = new FileWriter(archivo_actual.getArchivo());
                    bw = new BufferedWriter(fw);
                    bw.write(TA_ArchivoAbierto.getText());
                    TA_ArchivoAbierto.setText("");
                    bw.flush();
                    aa.cargarArchivo();
                    for (Archivo archivo : aa.getLista_archivos()) {
                        if (archivo.getID() == archivo_actual.getID()) {
                            archivo.setArchivo(archivo_actual.getArchivo());
                            /*  for (int i = 0; i < campos_nuevos.size(); i++) {
                            archivo.addCampo(campos_nuevos.get(i));
                        } // Fin For  */
                            //campos_nuevos.clear();
                            break;
                        } // Fin If
                    } // Fin For
                    aa.escribirArchivo();
                    try {
                        bw.close();
                        fw.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    } // Fin Try Catch
                } // Fin If
                /*if (GuardarArchivo != null) {
                    for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                        if (archivo_actual.getCampos().get(i).isLlavePrimaria()) {
                            try {
                                escribirArbol(GuardarArchivo + archivo_actual.getCampos().get(i).getNombre(), arboles.get(i));
                            } catch (Exception ex) {
                                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    try {
                        writeAvailList();
                    } catch (IOException ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }*/
            } else {
                /*for (int i = 0; i < campos_nuevos.size(); i++) {
                    archivo_actual.addCampo(campos_nuevos.get(i));
                } // Fin For  */
                FileWriter fw = null;
                BufferedWriter bw = null;
                fw = new FileWriter(archivo_actual.getArchivo());
                bw = new BufferedWriter(fw);
                bw.write(TA_ArchivoAbierto.getText());
                TA_ArchivoAbierto.setText("");
                bw.flush();
                aa.cargarArchivo();
                for (Archivo archivo : aa.getLista_archivos()) {
                    if (archivo.getID() == archivo_actual.getID()) {
                        archivo.setArchivo(archivo_actual.getArchivo());
                        /*  for (int i = 0; i < campos_nuevos.size(); i++) {
                            archivo.addCampo(campos_nuevos.get(i));
                        } // Fin For  */
                        // campos_nuevos.clear();
                        break;
                    } // Fin If
                } // Fin For
                aa.escribirArchivo();
                try {
                    bw.close();
                    fw.close();
                } catch (Exception e) {
                    e.printStackTrace();
                } // Fin Try Catch
                /* if (GuardarArchivo != null) {
                    for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                        if (archivo_actual.getCampos().get(i).isLlavePrimaria()) {
                            try {
                                escribirArbol(GuardarArchivo + archivo_actual.getCampos().get(i).getNombre(), arboles.get(i));
                            } catch (Exception ex) {
                                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    try {
                        writeAvailList();
                    } catch (IOException ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    arboles.getArbol().imprimir_arbol(0, 0);
                }*/
            } // Fin If
            //Esto guarda lo que es el avalist del archivo una vez se cierra el archivo para manetner su arbol
            // Fin Try Catch
            GuardarArchivo = null;
            archivo_actual = null;
            campos_nuevos.clear();
            VentanaMenuCampos.setVisible(false);
            this.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_BTN_CerrarArchivoActionPerformed

    private void BTN_AbrirCrearCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_AbrirCrearCampoActionPerformed
        // DESPLIEGA EL JDIALOG DONDE SE CREA UN CAMPO
        try {
            TF_NombreDelCampo.setText("");
            CB_TipoDeDatoDelCampo.setSelectedIndex(0);
            SP_LongitudDelCampo.setValue(0);
            RB_LlavePrimariaDelCampo.setSelected(false);
            VentanaMenuCampos.setVisible(false);
            JD_CrearCampos.setModal(true);
            JD_CrearCampos.pack();
            JD_CrearCampos.setLocationRelativeTo(this);
            JD_CrearCampos.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_AbrirCrearCampoActionPerformed

    private void BTN_AbrirModificarCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_AbrirModificarCampoActionPerformed
        // DESPLIEGA EL JDIALOG DONDE SE MODIFICA UN CAMPO
        try {
            TF_NombreDelCampoModificado.setText("");
            CB_TipoDeDatoDelCampoModificado.setSelectedIndex(0);
            SP_LongitudDelCampoModificado.setValue(0);
            RB_LlavePrimariaDelCampoModificado.setSelected(false);
            VentanaMenuCampos.setVisible(false);
            JD_ModificarCampos.setModal(true);
            JD_ModificarCampos.pack();
            JD_ModificarCampos.setLocationRelativeTo(this);
            JD_ModificarCampos.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_AbrirModificarCampoActionPerformed

    private void BTN_AbrirBorrarCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_AbrirBorrarCampoActionPerformed
        // DESPLIEGA EL JDIALOG DONDE SE BORRA UN CAMPO
        try {
            VentanaMenuCampos.setVisible(false);
            JD_BorrarCampos.setModal(true);
            JD_BorrarCampos.pack();
            JD_BorrarCampos.setLocationRelativeTo(this);
            JD_BorrarCampos.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_AbrirBorrarCampoActionPerformed

    private void BTN_AbrirListarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_AbrirListarCamposActionPerformed
        // DESPLIEGA EL JDIALOG DONDE SE LISTAN TODOS LOS CAMPOS DE MANERA FORMATEADA
        try {
            VentanaMenuCampos.setVisible(false);
            JD_ListarCampos.setModal(true);
            JD_ListarCampos.pack();
            JD_ListarCampos.setLocationRelativeTo(this);
            JD_ListarCampos.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_AbrirListarCamposActionPerformed

    private void BTN_CancelarCrearCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CancelarCrearCampoActionPerformed
        // REGRESAMOS DEL JDIALOG CREAR CAMPO AL MENU DE CAMPOS
        try {
            JD_CrearCampos.setVisible(false);
            VentanaMenuCampos.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_CancelarCrearCampoActionPerformed

    private void BTN_CancelarListarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CancelarListarCamposActionPerformed
        // REGRESAMOS DEL JDIALOG LISTAR CAMPOS AL MENU DE CAMPOS
        try {
            JD_ListarCampos.setVisible(false);
            VentanaMenuCampos.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_CancelarListarCamposActionPerformed

    private void BTN_CancelarBorrarCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CancelarBorrarCampoActionPerformed
        // REGRESAMOS DEL JDIALOG BORRAR CAMPO AL MENU DE CAMPOS
        try {
            JD_BorrarCampos.setVisible(false);
            VentanaMenuCampos.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_CancelarBorrarCampoActionPerformed

    private void BTN_CancelarModificarCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CancelarModificarCampoActionPerformed
        // REGRESAMOS DEL JDIALOG MODIFICAR CAMPO AL MENU DE CAMPOS
        try {
            JD_ModificarCampos.setVisible(false);
            VentanaMenuCampos.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_CancelarModificarCampoActionPerformed

    private void BTN_CrearCampoDefinitivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CrearCampoDefinitivoActionPerformed
        // SE CREA UN CAMPO DENTRO DEL ARCHIVO
        try {
            salvado = true;
            boolean existe = false;
            boolean llaveprimaria = false;
            String nombre = TF_NombreDelCampo.getText();
            for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                if (archivo_actual.getCampos().get(i).getNombre().equals(nombre)) {
                    existe = true;
                }
            }//fin for validacion del cmapo para ver si su nomre ya existe
            int tipo_de_dato, longitud;
            tipo_de_dato = CB_TipoDeDatoDelCampo.getSelectedIndex();
            longitud = Integer.parseInt(SP_LongitudDelCampo.getValue().toString());
            boolean llave_primaria = false;
            if (RB_LlavePrimariaDelCampo.isSelected()) {
                llave_primaria = true;
            } // Fin If
            for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                if (archivo_actual.getCampos().get(i).isLlavePrimaria() == true) {
                    llaveprimaria = true;
                }
            }//fin for para validar llave primaria
            for (int i = 0; i < campos_nuevos.size(); i++) {
                if (campos_nuevos.get(i).isLlavePrimaria() == true) {
                    llaveprimaria = true;
                }
            }//fin for para validar llave primaria
            int ID_campo, ID_archivo;
            ID_campo = GenerarIDCampo();
            ID_archivo = archivo_actual.getID();
            Campo campo_nuevo = new Campo(ID_campo, ID_archivo, nombre, tipo_de_dato, longitud, llave_primaria);
            if (tipo_de_dato == 0) {
                campo_nuevo.setTipo("int");
            } else if (tipo_de_dato == 7) {
                campo_nuevo.setTipo("String");
            }

            System.out.println(llave_primaria);
            System.out.println(llaveprimaria);
            if (existe == false) {
                if (llave_primaria == false && llaveprimaria == false) {
                    // EMPIEZA ONASIS
                    campo_actual = campo_nuevo;
                    campos_nuevos.add(campo_nuevo);
                    añadir_campo_txt(campo_nuevo); // PROBAR: PUEDO USAR EL ARRAYLIST EN SALVAR PARA USAR ESTE METODO
                    TF_NombreDelCampo.setText("");
                    CB_TipoDeDatoDelCampo.setSelectedIndex(0);
                    SP_LongitudDelCampo.setValue(0);
                    RB_LlavePrimariaDelCampo.setSelected(false);
                    secreo = true;
                    // TERMINA ONASIS
                } else if (llave_primaria == true && llaveprimaria == false) {
                    campo_actual = campo_nuevo;
                    campos_nuevos.add(campo_nuevo);
                    añadir_campo_txt(campo_nuevo); // PROBAR: PUEDO USAR EL ARRAYLIST EN SALVAR PARA USAR ESTE METODO
                    TF_NombreDelCampo.setText("");
                    CB_TipoDeDatoDelCampo.setSelectedIndex(0);
                    SP_LongitudDelCampo.setValue(0);
                    RB_LlavePrimariaDelCampo.setSelected(false);
                    secreo = true;
                } else if (llave_primaria == false && llaveprimaria == true) {
                    campo_actual = campo_nuevo;
                    campos_nuevos.add(campo_nuevo);
                    añadir_campo_txt(campo_nuevo); // PROBAR: PUEDO USAR EL ARRAYLIST EN SALVAR PARA USAR ESTE METODO
                    TF_NombreDelCampo.setText("");
                    CB_TipoDeDatoDelCampo.setSelectedIndex(0);
                    SP_LongitudDelCampo.setValue(0);
                    RB_LlavePrimariaDelCampo.setSelected(false);
                    secreo = true;
                } else if (llave_primaria == true && llaveprimaria == true) {
                    JOptionPane.showMessageDialog(null, "No se puede crear el campo porque ya existe una llave primaria");
                }// Fin If
            } else if (existe == true) {
                JOptionPane.showMessageDialog(null, "No se puede crear el campo porque ya existe un campo con el mismo nombre");
            } else if (llaveprimaria == true) {
                JOptionPane.showMessageDialog(null, "No se puede crear el campo porque ya existe una llave primaria");
                llaveprimaria = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_BTN_CrearCampoDefinitivoActionPerformed

    private void BTN_ModificarCampoDefinitivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_ModificarCampoDefinitivoActionPerformed
        // SE MODIFICA UN CAMPO DENTRO DEL ARCHIVO
        if (CB_CampoAModificar.getSelectedIndex() >= 1) {
            try {
                boolean vacio_nombre = false;
                boolean mostrar_mensaje = true;
                salvado = true;
                boolean existe = false;
                boolean llaveprimaria = false;
                String nombre;
                int tipo_de_dato, longitud;
                boolean llave_primaria = false;
                nombre = TF_NombreDelCampoModificado.getText();
                for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                    if (i != CB_CampoAModificar.getSelectedIndex() - 1) {
                        if (archivo_actual.getCampos().get(i).getNombre().equals(nombre)) {
                            existe = true;
                        }
                    }
                }//fin for validacion del cmapo para ver si su nomre ya existe
                tipo_de_dato = CB_TipoDeDatoDelCampoModificado.getSelectedIndex();
                longitud = Integer.parseInt(SP_LongitudDelCampoModificado.getValue().toString());
                if (RB_LlavePrimariaDelCampoModificado.isSelected()) {
                    llave_primaria = true;
                } // Fin If
                for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                    if (archivo_actual.getCampos().get(i).isLlavePrimaria() == true) {
                        llaveprimaria = true;
                    }
                }//fin for para validar llave primaria
                System.out.println(llave_primaria);
                System.out.println(llaveprimaria);
                if (nombre.equals("")) {
                    vacio_nombre = true;
                } else {
                    vacio_nombre = false;
                }
                System.out.println("Esta vacio: " + vacio_nombre);
                if (existe == false) {
                    if ((llave_primaria == false && llaveprimaria == false) && vacio_nombre == false) {
                        for (Campo campo : campos_nuevos) {
                            if (campo.getID() == campo_actual.getID()) {
                                if ((campo.getNombre().equals(nombre) && (campo.getTipo_de_dato() == tipo_de_dato)) && ((campo.getLongitud() == longitud) && campo.isLlavePrimaria() == llave_primaria)) {
                                    mostrar_mensaje = false;
                                } else {
                                    mostrar_mensaje = true;
                                }
                                campo.setNombre(nombre);
                                campo.setTipo_de_dato(tipo_de_dato);
                                campo.setLongitud(longitud);
                                campo.setLlaveprimaria(llave_primaria);
                            } // Fin If
                        } // Fin For
                        // Tener en cuenta el archivo actual
                        cambios_txt();
                        TF_NombreDelCampoModificado.setText("");
                        CB_TipoDeDatoDelCampoModificado.setSelectedIndex(0);
                        SP_LongitudDelCampoModificado.setValue(0);
                        RB_LlavePrimariaDelCampoModificado.setSelected(false);
                        if (mostrar_mensaje) {
                            JOptionPane.showMessageDialog(this, "¡Se ha modificado el campo exitosamnte!");
                            semodifico = true;
                        } else {
                            mostrar_mensaje = true;
                        }
                        // ONASIS TERMINA
                    } else if ((llave_primaria == true && llaveprimaria == false) && vacio_nombre == false) {
                        for (Campo campo : campos_nuevos) {
                            if (campo.getID() == campo_actual.getID()) {
                                if ((campo.getNombre().equals(nombre) && (campo.getTipo_de_dato() == tipo_de_dato)) && ((campo.getLongitud() == longitud) && campo.isLlavePrimaria() == llave_primaria)) {
                                    mostrar_mensaje = false;
                                } else {
                                    mostrar_mensaje = true;
                                }
                                campo.setNombre(nombre);
                                campo.setTipo_de_dato(tipo_de_dato);
                                campo.setLongitud(longitud);
                                campo.setLlaveprimaria(llave_primaria);
                            } // Fin If
                        } // Fin For
                        // Tener en cuenta el archivo actual
                        //modificar_txt();
                        cambios_txt();
                        TF_NombreDelCampoModificado.setText("");
                        CB_TipoDeDatoDelCampoModificado.setSelectedIndex(0);
                        SP_LongitudDelCampoModificado.setValue(0);
                        RB_LlavePrimariaDelCampoModificado.setSelected(false);
                        if (mostrar_mensaje) {
                            JOptionPane.showMessageDialog(this, "¡Se ha modificado el campo exitosamnte!");
                            semodifico = true;
                        } else {
                            mostrar_mensaje = true;
                        }

                    } else if ((llave_primaria == false && llaveprimaria == true) && vacio_nombre == false) {
                        for (Campo campo : campos_nuevos) {
                            if (campo.getID() == campo_actual.getID()) {
                                if ((campo.getNombre().equals(nombre) && (campo.getTipo_de_dato() == tipo_de_dato)) && ((campo.getLongitud() == longitud) && campo.isLlavePrimaria() == llave_primaria)) {
                                    mostrar_mensaje = false;
                                } else {
                                    mostrar_mensaje = true;
                                }
                                campo.setNombre(nombre);
                                campo.setTipo_de_dato(tipo_de_dato);
                                campo.setLongitud(longitud);
                                campo.setLlaveprimaria(llave_primaria);
                            } // Fin If
                        } // Fin For
                        // Tener en cuenta el archivo actual
                        //modificar_txt();
                        cambios_txt();
                        TF_NombreDelCampoModificado.setText("");
                        CB_TipoDeDatoDelCampoModificado.setSelectedIndex(0);
                        SP_LongitudDelCampoModificado.setValue(0);
                        RB_LlavePrimariaDelCampoModificado.setSelected(false);
                        if (mostrar_mensaje) {
                            JOptionPane.showMessageDialog(this, "¡Se ha modificado el campo exitosamnte!");
                            semodifico = true;
                        } else {
                            mostrar_mensaje = true;
                        }
                    } else if (llave_primaria == true && llaveprimaria == true) {
                        JOptionPane.showMessageDialog(null, "No se puede crear el campo porque ya existe una llave primaria");
                    } else if ((llave_primaria == false && llaveprimaria == true) && vacio_nombre == true) {
                        JOptionPane.showMessageDialog(null, "No se puede crear el campo porque no existe un nombre para el campo");
                    } else if ((llave_primaria == true && llaveprimaria == false) && vacio_nombre == true) {
                        JOptionPane.showMessageDialog(null, "No se puede crear el campo porque no existe un nombre para el campo");
                    }
                } else if (existe == true) {
                    JOptionPane.showMessageDialog(null, "No se puede crear el campo porque ya existe un campo con el mismo nombre");
                } else if (llaveprimaria == true) {
                    JOptionPane.showMessageDialog(null, "No se puede crear el campo porque ya existe una llave primaria");
                    llaveprimaria = false;
                }
            } catch (Exception e) {
                e.printStackTrace();
            } // Fin Try Catch
        } else {
            JOptionPane.showMessageDialog(this, "Debes seleccionar un campo.");
        }
    }//GEN-LAST:event_BTN_ModificarCampoDefinitivoActionPerformed

    // ArrayList<Campo> temp = new ArrayList();
    public void modificar_txt() {
        // Forma de Escribir:
        FileWriter fw = null;
        BufferedWriter bw = null;
        //FileReader fr = null;
        //BufferedReader br = null;
        try {
            //  fr = new FileReader(archivo_actual.getArchivo());
            // br = new BufferedReader(fr);
            String linea_modificada = "";
            for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                linea_modificada += archivo_actual.getCampos().get(i).campo_para_archivo();
            }//*/
            fw = new FileWriter(archivo_actual.getArchivo());
            bw = new BufferedWriter(fw);
            bw.write(linea_modificada);
            bw.flush();
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
        try {
            bw.close();
            fw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }//fin try catch
    }

    private void BTN_BorrarCampoDefinitivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_BorrarCampoDefinitivoActionPerformed
        // SE BORRA UN CAMPO DENTRO DEL ARCHIVO
        // SE BORRA UN CAMPO DENTRO DEL ARCHIVO
        if (CB_CampoABorrar.getSelectedIndex() > 0) {
            try {
                salvado = true;
                for (int i = 0; i < campos_nuevos.size(); i++) {
                    if (campos_nuevos.get(i).getID() == campo_actual.getID()) {
                        campos_nuevos.remove(i);
                    } // Fin If              
                } // Fin For
                // AGREGAR METODO QUE ESCRIBA EN EL ARCHIVO TXT
                cambios_txt();
                seborro = true;
                JOptionPane.showMessageDialog(this, "¡Se ha eliminado el campo exitosamnte!");
            } catch (Exception e) {
                e.printStackTrace();
            } // Fin Try Catch
        } else {
            JOptionPane.showMessageDialog(this, "No has seleccionado ningún campo.");
        }
    }//GEN-LAST:event_BTN_BorrarCampoDefinitivoActionPerformed


    private void CB_CampoAModificarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CB_CampoAModificarItemStateChanged
        // ACTUALIZA LA INFORMACIÓN EN EL JDIALOG CON CADA CAMBIO
        try {
            // Tener Ojo con el primer elemento
            Campo campo_modificar;
            String nombre_campo_modificar;
            nombre_campo_modificar = (String) CB_CampoAModificar.getSelectedItem();
            campo_modificar = MatchNombreCampo(nombre_campo_modificar);
            if (campo_modificar != null) {
                TF_NombreDelCampoModificado.setText(campo_modificar.getNombre());
                CB_TipoDeDatoDelCampoModificado.setSelectedIndex(campo_modificar.getTipo_de_dato());
                SP_LongitudDelCampoModificado.setValue(campo_modificar.getLongitud());
                RB_LlavePrimariaDelCampoModificado.setSelected(campo_modificar.isLlavePrimaria());
                campo_actual = campo_modificar;
            } // Fin If 
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_CB_CampoAModificarItemStateChanged

    private void CB_CampoABorrarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CB_CampoABorrarItemStateChanged
        // TODO add your handling code here:
        try {
            // Tener Ojo con el primer elemento
            Campo campo_borrar;
            String nombre_campo_borrar;
            nombre_campo_borrar = (String) CB_CampoABorrar.getSelectedItem();
            campo_borrar = MatchNombreCampo(nombre_campo_borrar);
            if (campo_borrar != null) {
                campo_actual = campo_borrar;
            } // Fin If
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
    }//GEN-LAST:event_CB_CampoABorrarItemStateChanged

    private void jb_insertarcolumnaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_insertarcolumnaMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabla_registros.getModel();
        if (ValidaciondeingresoTabla(tabla_registros, false)) {
            Object k = new Object[archivo_actual.getCampos().size()];
            model.addRow((Object[]) k);
        }
    }//GEN-LAST:event_jb_insertarcolumnaMouseClicked

    private void jb_defcrearregistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_defcrearregistroMouseClicked
        // TODO add your handling code here:
        arboles.cargarArchivo();
        DefaultTableModel model = (DefaultTableModel) tabla_registros.getModel();
        if (!ValidaciondeingresoTabla(tabla_registros, true)) {
            return;
        }
        String guardar = "";//Aqui es donde se guarda el registro a ingresar
        // int length=0;
        boolean omitidos = false;//esto es para los que ya estan creados en el arbol
        boolean arbolcreado = false;//verifica si el arbol esta creado
        int getposarbol = 0;//agarra la posicion del arbol
        //esto verifica que el arbol no exista
        for (int i = 0; i < arboles.getListaarboles().size(); i++) {
            if (arboles.getListaarboles().get(i).getArchivo().equals(archivo_actual.getArchivo())) {
                arbolcreado = true;
                getposarbol = i;//se agarra la posicion del arbol creado
                arbol_actual = arboles.getListaarboles().get(i).getArbol();
                break;
            }
        }
        //
        int llaveprimaria = 0;
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            if (archivo_actual.getCampos().get(i).isLlavePrimaria()) {
                llaveprimaria = i;
            }
        }
        //Aqui se empieza a trabajar en la creacion
        if (arbolcreado == false) {
            //Aqui es sie el arbol no esta creado pues se crea dentro de la lista de arboles y se hace el registro
            System.out.println("no habia rchivo creado");

            arboles.cargarArchivo();
            String llave_primaria = "";
            int id = arboles.GenerarId();
            Archivoconarbolb Archivodelarbol = new Archivoconarbolb(archivo_actual.getArchivo(), id);
            Archivodelarbol.setArbol(6);
            for (int i = 0; i < model.getRowCount(); i++) {
                guardar = "";
                for (int j = 0; j < model.getColumnCount(); j++) {
                    guardar += model.getValueAt(i, j).toString() + "|";

                }
                guardar += llenar(guardar.length()) + "\n";
                int pk = getPosKey();
                    String llave = model.getValueAt(i, llaveprimaria).toString();
                    if (archivo_actual.getCampos().get(llaveprimaria).getTipo().equals("String")) {
                        int num = archivo_actual.getCampos().get(llaveprimaria).getLongitud() - llave.length();
                        llave = espacios.substring(0, num) + llave;
                    } else if (archivo_actual.getCampos().get(llaveprimaria).getTipo().equals("int")) {
                        int num = archivo_actual.getCampos().get(llaveprimaria).getLongitud() - llave.length();
                        llave = espacios.substring(0, num) + llave;
                    }
                    if (Archivodelarbol.getArbol().B_Tree_Search(Archivodelarbol.getArbol().getRaiz(), llave) != null) {
                        omitidos = true;
                    } else {
                        /*       registross.add(guardar);*/
                        int rrn = guardarRegistro(guardar);//aqui manda a llamar al rrn para designarlo al arbol
                        System.out.println("El rrn es:" + rrn);
                        Archivodelarbol.getArbol().insert(llave, rrn);
                    }
            }
            Archivodelarbol.getArbol().imprimir_arbol(0, 0);
            arboles.getListaarboles().add(Archivodelarbol);
            arboles.escribirArchivo();
        } else {
            //Aqui se hace cuando el arbol ya esta creado
            System.out.println("entro al archivo creado");
            arboles.cargarArchivo();
            System.out.println("entro aca");
            for (int i = 0; i < model.getRowCount(); i++) {
                guardar = "";
                for (int j = 0; j < model.getColumnCount(); j++) {
                    guardar += model.getValueAt(i, j).toString() + "|";
                    //length+=guardar.length();
                }
                guardar += llenar(guardar.length()) + "\n";
                int pk = getPosKey();
                String llave = model.getValueAt(i, pk).toString();
                    if (archivo_actual.getCampos().get(llaveprimaria).getTipo().equals("String")) {
                        int num = archivo_actual.getCampos().get(llaveprimaria).getLongitud() - llave.length();
                        System.out.println("este es el num :" + num);
                        llave = espacios.substring(0, num) + llave;
                    } else if (archivo_actual.getCampos().get(llaveprimaria).getTipo().equals("int")) {
                        int num = archivo_actual.getCampos().get(llaveprimaria).getLongitud() - llave.length();
                        System.out.println("este es el num :" + num);
                        llave = espacios.substring(0, num) + llave;
                    }
                if (arboles.getListaarboles().get(getposarbol).getArbol().B_Tree_Search(arboles.getListaarboles().get(getposarbol).getArbol().getRaiz(), llave) != null) {
                    omitidos = true;
                } else {
                    int rrn = guardarRegistro(guardar);//aqui manda a llamar al rrn para designarlo al arbol
                    System.out.println("El rrn es:" + rrn);
                    arboles.getListaarboles().get(getposarbol).getArbol().insert(llave, rrn);
                }//fin else
            }//Fin for
            arbol_actual = arboles.getListaarboles().get(getposarbol).getArbol();
            arboles.getListaarboles().get(getposarbol).getArbol().imprimir_arbol(0, 0);
            arboles.escribirArchivo();
        }//fin else
        String message;
        //esto lo que hace es enviar un mensaje a ver si el registro ya existe en el arbol
        if (omitidos) {
            message = "Algunos registros fueron omitidos porque ya habia un registro con la misma llave primaria almacenado en el archvo.";
        } else {
            message = "Guardado Exitoso";
        }
        arboles.escribirArchivo();
        JOptionPane.showMessageDialog(null, message);
        tabla_registros.setModel(new DefaultTableModel());
        DefaultTableModel modelo = (DefaultTableModel) tabla_registros.getModel();
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            modelo.addColumn(archivo_actual.getCampos().get(i).getNombre());
        }
        modelo.setNumRows(1);
    }//GEN-LAST:event_jb_defcrearregistroMouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        // TODO add your handling code here:
        jD_Registros.pack();
        jD_Registros.setLocationRelativeTo(null);
        jD_Registros.setVisible(true);
    }//GEN-LAST:event_jButton7MouseClicked

    private void jb_salirdecrearregistrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_salirdecrearregistrosMouseClicked
        // TODO add your handling code here:
        Crear_registros.setVisible(false);
    }//GEN-LAST:event_jb_salirdecrearregistrosMouseClicked

    private void jb_botondefbuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_botondefbuscarMouseClicked
        // TODO add your handling code here:
        if (tf_buscarregistro.getText().equals("") || cb_buscar_registro.getSelectedItem() == null) {
            return;
        }
        boolean arbolcreado = false;//verifica si el arbol esta creado
        int getposarbol = 0;//esto es para agrrar la posicion dle arbolcreado
        for (int i = 0; i < arboles.getListaarboles().size(); i++) {
            if (arboles.getListaarboles().get(i).getArchivo().equals(archivo_actual.getArchivo())) {
                arbolcreado = true;
                getposarbol = i;
                arbol_actual = arboles.getListaarboles().get(i).getArbol();
                break;
            }
        }
        if (arbolcreado == true) {
            Object Item = cb_buscar_registro.getSelectedItem();
//        int pos = ((itemcombo)Item).getPos();
            DefaultTableModel model = (DefaultTableModel) Tabla_buscarregistro.getModel();
            model.getDataVector().removeAllElements();
            if (true || cb_buscar_registro.getSelectedIndex() == 0) {
                int pk = 0;
                String llave = tf_buscarregistro.getText();
                int llaveprimaria = 0;
                for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                    if (archivo_actual.getCampos().get(i).isLlavePrimaria()) {
                        llaveprimaria = i;
                    }
                }

                if (archivo_actual.getCampos().get(pk).getTipo().equals("int")) {
                    int num = archivo_actual.getCampos().get(pk).getLongitud() - llave.length();
                    llave = espacios.substring(0, num) + llave;
                } else if (archivo_actual.getCampos().get(pk).getTipo().equals("String")) {
                    int num = archivo_actual.getCampos().get(pk).getLongitud() - llave.length();
                    llave = espacios.substring(0, num) + llave;
                }
                if (llaveprimaria != 0) {
                    if (archivo_actual.getCampos().get(llaveprimaria).getTipo().equals("String")) {
                        int num = archivo_actual.getCampos().get(llaveprimaria).getLongitud() - llave.length();
                        System.out.println("estos son los espacios que elimina" + num);
                        int cont = 0;
                        if (num < 0) {
                            while (num < 0) {
                                num++;
                                cont++;
                            }
                        }
                        llave = llave.substring(cont, llave.length());
                    } else if (archivo_actual.getCampos().get(llaveprimaria).getTipo().equals("int")) {
                        int num = archivo_actual.getCampos().get(llaveprimaria).getLongitud() - llave.length();
                        System.out.println("estos son los espacios que eliminaa" + num);
                        int cont = 0;
                        if (num < 0) {
                            while (num < 0) {
                                num++;
                                cont++;
                            }
                        }
                        llave = llave.substring(cont, llave.length());
                        System.out.println("la nueva llave es: " + llave);
                    }
                }
                System.out.println("esta es la llave que se envia" + llave);
                rrnsbuscar = new ArrayList<Long>();
                arbol_actual.searchByAffinity(arbol_actual.getRaiz(), llave, rrnsbuscar);//searchbyaffinity lo que hace es devolver el rrn de la llave que buscamos

                if (rrnsbuscar.size() == 0) {
                    JOptionPane.showMessageDialog(null, "No se encontro ningun registro con ese valor");
                    tf_buscarregistro.setText("");
                    return;
                }
                for (long l : rrnsbuscar) {
                    rrnabuscar = Math.toIntExact(l);//al rrn se le asigan el valor que el rrn le ha enviado
                    try {
                        String data = leerregistro(Math.toIntExact(rrnabuscar));
                        System.out.println(data);
                        String arr[] = data.split("\\|");
                        Object arr2[] = new Object[model.getColumnCount()];
                        for (int i = 0; i < model.getColumnCount(); i++) {
                            arr2[i] = arr[i];
                        }
                        model.addRow(arr2);
                        //tf_buscarregistro.setEditable(false);
                        // cb_buscar_registro.setEnabled(false);
                    } catch (IOException ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se puede buscar porque no existen registros creados");
        }


    }//GEN-LAST:event_jb_botondefbuscarMouseClicked

    private void jb_defcrearregistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_defcrearregistroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_defcrearregistroActionPerformed

    private void btn_crearRegistrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_crearRegistrosMouseClicked
        // TODO add your handling code here:
        tabla_registros.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) tabla_registros.getModel();
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            model.addColumn(archivo_actual.getCampos().get(i).getNombre());
        }
        // System.out.println("esta vacio? " + archivo_actual.getAvailList().isEmpty());//HERRAMIENTA SECRETA
        model.setNumRows(1);
        Crear_registros.pack();
        Crear_registros.setModal(true);
        Crear_registros.setLocationRelativeTo(null);
        jD_Registros.setVisible(false);
        Crear_registros.setVisible(true);
    }//GEN-LAST:event_btn_crearRegistrosMouseClicked

    private void btn_buscarRegistrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarRegistrosActionPerformed
        // TODO add your handling code here:

        /*DefaultTableModel modelo = new DefaultTableModel();
        jTbl_buscarRegistros.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) jTbl_buscarRegistros.getModel();
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            model.addColumn(archivo_actual.getCampos().get(i).getNombre());
        }
        /*for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            if (archivo_actual.getCampos().get(i).isLlavePrimaria()) {
                itemcombo ic = new itemcombo(archivo_actual.getCampos().get(i).getNombre(), i);
                cb_buscar_registro.addItem(ic.toString());
                break;
            }
        }//*/
        // jCb_llavesBuscarregistros.removeAllItems();
        /* jTbl_buscarRegistros.setModel(modelo);
        jCb_llavesBuscarregistros.setModel(new DefaultComboBoxModel<>());
        DefaultComboBoxModel cBox_model = (DefaultComboBoxModel) jCb_llavesBuscarregistros.getModel();
        cBox_model.addElement("Seleccione: ");
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            if (archivo_actual.getCampo(i).isLlavePrimaria()) {
                cBox_model.addElement(archivo_actual.getCampo(i).getNombre());
            }
        }
        jCb_llavesBuscarregistros.setModel(cBox_model);*/
        DefaultTableModel modelo = new DefaultTableModel();
        Tabla_buscarregistro.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) Tabla_buscarregistro.getModel();
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            model.addColumn(archivo_actual.getCampos().get(i).getNombre());
        }
        tabla_registros.setModel(modelo);
        cb_buscar_registro.setModel(new DefaultComboBoxModel<>());
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            if (archivo_actual.getCampos().get(i).isLlavePrimaria()) {
                itemcombo ic = new itemcombo(archivo_actual.getCampos().get(i).getNombre(), i);
                cb_buscar_registro.addItem(ic.toString());
                break;
            }
        }

        tf_buscarregistro.setText("");
        Buscar_registrso.pack();
        Buscar_registrso.setModal(true);
        Buscar_registrso.setLocationRelativeTo(null);
        Buscar_registrso.setVisible(true);
    }//GEN-LAST:event_btn_buscarRegistrosActionPerformed

    private void modificar_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificar_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modificar_textfieldActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        jD_Registros.setVisible(false);
        label_llaveaingresar.setText(archivo_actual.getCampos().get(0).getNombre());
        Tabla_modregistros.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) Tabla_modregistros.getModel();
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            model.addColumn(archivo_actual.getCampos().get(i).getNombre());
        }
        Modificar_Registros.pack();
        Modificar_Registros.setModal(true);
        Modificar_Registros.setLocationRelativeTo(null);
        Modificar_Registros.setVisible(true);
        Tabla_modregistros.setModel(new DefaultTableModel());
    
    }//GEN-LAST:event_jButton2MouseClicked

    private void jb_defmodificarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_defmodificarMouseClicked
        // TODO add your handling code here:
        if (jb_defmodificar.isEnabled()) {
            if (ValidaciondeingresoTabla(Tabla_modregistros, false)) {
                DefaultTableModel model = (DefaultTableModel) Tabla_modregistros.getModel();

                String guardar = "";
                // int length=0;
                guardar = "";
                for (int j = 0; j < model.getColumnCount(); j++) {
                    guardar += model.getValueAt(0, j).toString() + "|";
                    //length+=guardar.length();
                }
                model.removeRow(0);
                try {
                    Modificar(guardar, rrnModificar);
                    JOptionPane.showMessageDialog(null, "Registro modificado exitosamente");
                    modificar_textfield.setText("");
                    modificar_textfield.setEditable(true);
                    jb_defmodificar.setEnabled(false);
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jb_defmodificarMouseClicked

    private void jb_buscarllave_modMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_buscarllave_modMouseClicked
        // TODO add your handling code here:
          DefaultTableModel model = (DefaultTableModel) Tabla_modregistros.getModel();
        if ("".equals(modificar_textfield.getText())) {
            JOptionPane.showMessageDialog(null, "Favor ingrese el valor que desea buscar");
        } else if (model.getRowCount() != 1) {
            int pk = 0;
            String llave = modificar_textfield.getText();
            if (archivo_actual.getCampos().get(pk).getTipo().equals("int")) {
                int num = archivo_actual.getCampos().get(pk).getLongitud() - llave.length();
                llave = espacios.substring(0, num) + llave;
            }
            NodoIndice nodo = arbol_actual.B_Tree_Search(arbol_actual.getRaiz(), llave);
            if (nodo == null) {
                JOptionPane.showMessageDialog(null, "No se encontro ningun registro con ese valor");
                modificar_textfield.setText("");
                return;
            }
            rrnModificar = Math.toIntExact(nodo.getNodo().getLlaves().get(nodo.getIndice()).getPos());
            System.out.println(rrnModificar);
            try {
                String data = leerregistro(Math.toIntExact(rrnModificar));
                System.out.println(data);
                System.out.println(rrnModificar);
                String arr[] = data.split("\\|");
                System.out.println(arr[0]);
                System.out.println(nodo.getNodo().getLlaves().get(nodo.getIndice()).getPos());
                //System.out.println(archivo_actual.getAvailList().peekFirst());
                Object arr2[] = new Object[model.getColumnCount()];
                for (int i = 0; i < model.getColumnCount(); i++) {
                    arr2[i] = arr[i];
                }
                model.addRow(arr2);
                modificar_textfield.setEditable(false);
                jb_defmodificar.setEnabled(true);
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jb_buscarllave_modMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    public void borrar_txt() {
        // Forma de Escribir:
        FileWriter fw = null;
        BufferedWriter bw = null;
        //FileReader fr = null;
        //BufferedReader br = null;
        try {
            //  fr = new FileReader(archivo_actual.getArchivo());
            // br = new BufferedReader(fr);
            String linea = "";
            for (int i = 0; i < campos_nuevos.size(); i++) {
                linea += campos_nuevos.get(i).campo_para_archivo();
            }//*/
            fw = new FileWriter(archivo_actual.getArchivo());
            bw = new BufferedWriter(fw);
            bw.write(linea);
            bw.flush();
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
        try {
            bw.close();
            fw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }//fin try catch
    }// Fin Metodo

    public void cambios_txt() {
        // Forma de Escribir:
        FileWriter fw = null;
        BufferedWriter bw = null;
        //FileReader fr = null;
        //BufferedReader br = null;
        try {
            //  fr = new FileReader(archivo_actual.getArchivo());
            // br = new BufferedReader(fr);
            String linea = "";
            for (int i = 0; i < campos_nuevos.size(); i++) {
                linea += campos_nuevos.get(i).campo_para_archivo();
            }//*/
            fw = new FileWriter(archivo_actual.getArchivo());
            bw = new BufferedWriter(fw);
            bw.write(linea);
            bw.flush();
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
        try {
            bw.close();
            fw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }//fin try catch
    }// Fin Metodo

    public int GenerarIDCampo() {
        // CAMBIAR
        boolean valid;
        while (true) {
            valid = true;
            int ran;
            ran = 1 + random.nextInt(1000);
            for (Campo campo : archivo_actual.getCampos()) {
                if (campo.getID() == ran) {
                    valid = false;
                    break;
                } // Fin If
            } // Fin For
            if (valid) {
                return ran;
            } // Fin If
        } // Fin While
    } // Fin Generar ID Campo

    public Campo MatchNombreCampo(String name) {
        for (Campo campos : archivo_actual.getCampos()) {
            if (campos.getNombre().equals(name)) {
                return campos;
            } // Fin If
        } // Fin For
        return null;
    } // Fin Match Nombre Campo

    void EscribirCamposBinario() {
        try {
            /*for (int i = 0; i < campos_nuevos.size(); i++) {
                archivo_actual.addCampo(campos_nuevos.get(i));
            } // Fin For*/
            archivo_actual.setCampos(campos_nuevos);
            FileWriter fw = null;
            BufferedWriter bw = null;
            fw = new FileWriter(archivo_actual.getArchivo());
            bw = new BufferedWriter(fw);
            bw.write(TA_ArchivoAbierto.getText());
            bw.flush();
            aa.cargarArchivo();
            for (Archivo archivo : aa.getLista_archivos()) {
                if (archivo.getID() == archivo_actual.getID()) {
                    archivo.setArchivo(archivo_actual.getArchivo());
                    archivo.setCampos(campos_nuevos);
                    /*for (int i = 0; i < campos_nuevos.size(); i++) {
                        //archivo.addCampo(campos_nuevos.get(i));
                    } // Fin For  */
                    //campos_nuevos.clear();
                    break;
                } // Fin If
            } // Fin For
            aa.escribirArchivo();
            try {
                bw.close();
                fw.close();
            } catch (Exception e) {
                e.printStackTrace();
            } // Fin Try Catch
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void escribir_archivo_txt(String linea) {
        // Forma de Escribir:
        FileWriter fw = null;
        BufferedWriter bw = null;
        try {
            //archivo = new File("./salida.txt");
            //fw = new FileWriter(archivo_actual); // Sobreescribe 
            fw = new FileWriter(archivo_actual.getArchivo(), true); // Respeta el contenido
            bw = new BufferedWriter(fw);
            bw.write(linea);
            //bw.newLine(); ocupamos que escriba derecho para evitar fragmentacion, por eso la comentamos
            bw.flush();
        } catch (Exception e) {
            e.printStackTrace();
        } // Fin Try Catch
        try {
            bw.close();
            fw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }//fin try catch
    }//fin método

    void añadir_campo_txt(Campo campo) {
        String linea = campo.campo_para_archivo();
        escribir_archivo_txt(linea);
        JOptionPane.showMessageDialog(this, "¡Se ha creado el campo exitosamente!");
    }

    void listar_campos() {
        try {
            TA_ListarCampos.setText("");
            for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                TA_ListarCampos.append(archivo_actual.getCampos().get(i).toString());
                System.out.println(archivo_actual.getCampos().get(i).toString());
            } // Fin For
        } catch (Exception e) {
            System.out.println("error");
            e.printStackTrace();
        } // Fin Try Catch
    }// Fin Metodo

    void formatear_CBbox_borrar() {
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        modelo.addElement("Seleccione");
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            Campo campo_temporal = archivo_actual.getCampos().get(i);
            modelo.addElement(campo_temporal.getNombre());
        }// Fin If
        CB_CampoABorrar.setModel(modelo);
    }// Fin Metodo

    void formatear_CBbox_Modificar() {
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        modelo.addElement("Seleccione");
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            Campo campo_temporal = archivo_actual.getCampos().get(i);
            modelo.addElement(campo_temporal.getNombre());
        }// Fin If
        CB_CampoAModificar.setModel(modelo);
    }// Fin Metodo

    public String llenar(int n) {
        int lengthT = 0;
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            lengthT += archivo_actual.getCampos().get(i).getLongitud();
        }

        String spaces = "";
        for (int i = n; i < lengthT + archivo_actual.getCampos().size(); i++) {
            spaces += " ";
        }
        return spaces;
    }

    public void escribirArbol(String nombre, ArbolB arbol) {
        FileOutputStream fw = null;
        ObjectOutputStream bw = null;
        try {
            fw = new FileOutputStream(nombre + "keyTree");
            bw = new ObjectOutputStream(fw);
            bw.writeObject(arbol);
            bw.flush();
        } catch (Exception ex) {
        } finally {
            try {
                bw.close();
                fw.close();
            } catch (Exception ex) {
            }
        }
    }

    private void writeAvailList() throws FileNotFoundException, IOException {
        File file = new File(archivo_actual.getArchivo().getName());
        RandomAccessFile ra = new RandomAccessFile(file, "rw");
        ra.seek(archivo_actual.getSizeMetadata() - 6);
        String x;
        if (archivo_actual.getAvailList().isEmpty()) {
            x = rrnString(-1);
        } else {
            x = rrnString((int) archivo_actual.getAvailList().peekFirst());
        }
        ra.write(x.getBytes());
        ra.close();
    }

    private String rrnString(int rrn) {
        String rrnString = "";
        rrnString += rrn;
        for (int i = rrnString.length(); i < 5; i++) {
            rrnString += '.';
        }
        return rrnString;
    }

    private boolean ValidaciondeingresoTabla(JTable tabla, boolean guardar) {
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        //super funcion secreta que me actualize el dqu
        if (tabla.isEditing()) {
            tabla.getCellEditor().stopCellEditing();
        }
        if (model.getRowCount() != 0) {
            for (int i = 0; i < model.getColumnCount(); i++) {//se puede poner otro for para rows pero es feo pero asi soy feliz
                if (model.getValueAt(model.getRowCount() - 1, i) == null) {
                    if (guardar) {
                        model.removeRow(model.getRowCount() - 1);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede dejar ningun campo vacio!");
                        return false;
                    }
                }
                if (model.getValueAt(model.getRowCount() - 1, i).toString().length() > archivo_actual.getCampos().get(i).getLongitud()) {
                    JOptionPane.showMessageDialog(null, "En el campo \""
                            + archivo_actual.getCampos().get(i).getNombre() + "\" se esta pasando de la longitud maxima"
                            + " que es " + archivo_actual.getCampos().get(i).getLongitud());
                    model.setValueAt("", model.getRowCount() - 1, i);
                    return false;
                }
                if ("int".equals(archivo_actual.getCampos().get(i).getTipo_de_dato())) {
                    try {
                        Integer.parseInt(model.getValueAt(model.getRowCount() - 1, i).toString());
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "En el campo \""
                                + archivo_actual.getCampos().get(i).getNombre()
                                + "\" esta ingresando caracteres y solo se permiten enteros!");
                        return false;
                    }
                }
            }
        }
        return true;
    }

    private int getPosKey() {
        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
            if (archivo_actual.getCampos().get(i).isLlavePrimaria()) {
                return i;
            }
        }
        return -1;
    }
 private void Modificar(String data, int rrn) throws FileNotFoundException, IOException {
        
        RandomAccessFile flujo = new RandomAccessFile(archivo_actual.getArchivo(), "rw");
        flujo.seek(rrn);
        flujo.write(data.getBytes());
        flujo.close();
    }
    private String leerregistro(int RRN) throws FileNotFoundException, IOException {
        System.out.println("aqui esta el RRN: " + RRN);
        //preferiblemente no tocar esta parte del cdigo a menos que les de fallos contactar al administrador
        File archivo = new File(archivo_actual.getArchivo().getAbsolutePath());//esto lo que hace es asegurarse de leer el archivo correcto
        //lo de arrriba
        FileReader fr = new FileReader(archivo);
        String x = "";
        RandomAccessFile af = new RandomAccessFile(archivo, "r");
        af.seek(RRN);//aqui es donde se se mueve de bytes para buscar la llave
        int rrn = RRN;
        System.out.println("y este es el rrrn donde lee " + rrn);
        x = af.readLine();//esto lee la linea donde se quedo el puntero
        af.close();
        fr.close();
        return x;
    }

    private int tam_registro() {
        int length = 0;
        for (Campo campo : archivo_actual.getCampos()) {
            length += campo.getLongitud();
        }
        return length + archivo_actual.getCampos().size();
    }

    private int getRrn(String registro) {
        aa.cargarArchivo();
        if (archivo_actual.getAvailList().isEmpty()) {
            int pos_archivo = 0;
            for (int i = 0; i < aa.getLista_archivos().size(); i++) {
                if (aa.getLista_archivos().get(i).getID() == archivo_actual.getID()) {
                    pos_archivo = i;
                    break;
                }
            }
            if (aa.getLista_archivos().get(pos_archivo).getCant_regisros() == 0) {
                aa.cargarArchivo();
                int rrn = (250 - archivo_actual.getSizeMetadata());
                aa.getLista_archivos().get(pos_archivo).setCant_regisros();
                aa.escribirArchivo();
                return rrn;
            } else {
                aa.cargarArchivo();
                int rrn = (250 - archivo_actual.getSizeMetadata()) + (tam_registro() * aa.getLista_archivos().get(pos_archivo).getCant_regisros());
                aa.getLista_archivos().get(pos_archivo).setCant_regisros();
                aa.escribirArchivo();
                return rrn;
            }
        }
        return (int) archivo_actual.getAvailList().peekFirst();
    }

    private int guardarRegistro(String registro) {
        int rrn = getRrn(registro);
        if (archivo_actual.getAvailList().isEmpty()) {
            try {
                RandomAccessFile flujo = new RandomAccessFile(archivo_actual.getArchivo(), "rw");
                flujo.seek(rrn);
                flujo.write(registro.getBytes());
                flujo.close();
                return rrn;
                //valida que en la lista de registros no este creado el registro
                /*boolean registrocreado = false;
                registros.cargarArchivo();
                int getposregistro = 0;
                for (int i = 0; i < registros.getLista_archivos().size(); i++) {
                    if (registros.getLista_archivos().get(i).getArchivo().equals(archivo_actual.getArchivo())) {
                        registrocreado = true;
                        getposregistro = i;
                        registro_actual = registros.getLista_archivos().get(i);//se trabaja con un registro actual para facilitar el manejo de este
                        break;
                    }
                }*/
 /*try {
                    //en este if es si el registro no esta creado
                    if (registrocreado == false) {
                        int llaveprimaria = 0;
                        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                            if (archivo_actual.getCampos().get(i).isLlavePrimaria()) {
                                llaveprimaria = i;
                            }
                        }
                        if (llaveprimaria != 0) {
                            System.out.println("este es el registro: " + registro);
                            String registro2 = registro;
                            String arr[] = registro2.split("\\|");
                            String guardarllave = "";
                            for (int i = 0; i < arr.length; i++) {
                                System.out.println("esta es la llave: " + arr[i]);
                                if (llaveprimaria == i) {
                                    guardarllave = arr[0];
                                    arr[0] = arr[i];
                                    arr[i] = guardarllave;
                                }
                            }
                            String guardarcorreccion = "";
                            for (int i = 0; i < arr.length; i++) {
                                guardarcorreccion += arr[i] + "|";
                            }
                            System.out.println("esta es la correccion:" + guardarcorreccion);
                            registros.cargarArchivo();
                            int id = registros.GenerarId();
                            Registro registro_actual1 = new Registro(archivo_actual.getArchivo(), id);
                            File arch = new File(registro_actual1.getArchivo().getName());
                            RandomAccessFile flujo = new RandomAccessFile(arch, "rw");//aqui es donde se crea el raf al archivo
                            System.out.println("numero de registros: " + registro_actual1.getNumeroderegistros());
                            registro_actual1.addregistro();
                            flujo.seek(registro_actual1.getNumeroderegistros() * 75);//esto lo que hace es que va multiplicando la cantdad de registros por 75 ya que ese el tam de bytes que dejo
                            flujo.write(guardarcorreccion.getBytes());//aqui escribe los bytes
                            flujo.close();
                            System.out.println("esto fue lo que escribio en bytes: " + registro.getBytes().length);
                            registro_actual = registro_actual1;
                            System.out.println("este es donde esta registro_actual:" + registro_actual.getArchivo().getAbsolutePath());
                            System.out.println("numero de registros: " + registro_actual1.getNumeroderegistros());
                            registros.AddArchivo(registro_actual1);
                            registros.escribirArchivo();
                            return rrn = registro_actual1.getNumeroderegistros() * 75;//estas lineas devuelven el rrn que es la cantidad de registros *75
                        } else {
                            registros.cargarArchivo();
                            int id = registros.GenerarId();
                            Registro registro_actual1 = new Registro(archivo_actual.getArchivo(), id);
                            File arch = new File(registro_actual1.getArchivo().getName());
                            RandomAccessFile flujo = new RandomAccessFile(arch, "rw");//aqui es donde se crea el raf al archivo
                            System.out.println("numero de registros: " + registro_actual1.getNumeroderegistros());
                            registro_actual1.addregistro();
                            flujo.seek(registro_actual1.getNumeroderegistros() * 75);//esto lo que hace es que va multiplicando la cantdad de registros por 75 ya que ese el tam de bytes que dejo
                            flujo.write(registro.getBytes());//aqui escribe los bytes
                            flujo.close();
                            System.out.println("esto fue lo que escribio en bytes: " + registro.getBytes().length);
                            registro_actual = registro_actual1;
                            System.out.println("este es donde esta registro_actual:" + registro_actual.getArchivo().getAbsolutePath());
                            System.out.println("numero de registros: " + registro_actual1.getNumeroderegistros());
                            registros.AddArchivo(registro_actual1);
                            registros.escribirArchivo();
                            return rrn = registro_actual1.getNumeroderegistros() * 75;//estas lineas devuelven el rrn que es la cantidad de registros *75
                        }

                    } else {
                        int llaveprimaria = 0;
                        for (int i = 0; i < archivo_actual.getCampos().size(); i++) {
                            if (archivo_actual.getCampos().get(i).isLlavePrimaria()) {
                                llaveprimaria = i;
                            }
                        }
                        if (llaveprimaria != 0) {
                            System.out.println("este es el registro: " + registro);
                            String registro2 = registro;
                            String arr[] = registro2.split("\\|");
                            String guardarllave = "";
                            for (int i = 0; i < arr.length; i++) {
                                System.out.println("esta es la llave: " + arr[i]);
                                if (llaveprimaria == i) {
                                    guardarllave = arr[0];
                                    arr[0] = arr[i];
                                    arr[i] = guardarllave;
                                }
                            }
                            String guardarcorreccion = "";
                            for (int i = 0; i < arr.length; i++) {
                                guardarcorreccion += arr[i] + "|";
                            }
                            System.out.println("esta es la correccion:" + guardarcorreccion);

                            registros.cargarArchivo();
                            File arch = new File(registros.getLista_archivos().get(getposregistro).getArchivo().getName());
                            RandomAccessFile flujo = new RandomAccessFile(arch, "rw");
                            System.out.println("numero de registros: " + registros.getLista_archivos().get(getposregistro).getNumeroderegistros());
                            registros.getLista_archivos().get(getposregistro).addregistro();
                            flujo.seek(registros.getLista_archivos().get(getposregistro).getNumeroderegistros() * 75);
                            System.out.println("este es el registro que manda :" + registro);
                            flujo.write(registro.getBytes());
                            flujo.close();
                            registro_actual = registros.getLista_archivos().get(getposregistro);
                            System.out.println("este es donde esta registro_actual:" + registro_actual.getArchivo().getAbsolutePath());
                            System.out.println("numero de registros: " + registro_actual.getNumeroderegistros());
                            registros.escribirArchivo();
                            return rrn = registros.getLista_archivos().get(getposregistro).getNumeroderegistros() * 75;//estas lineas devuelven el rrn que es la cantidad de registros *75

                        } else {
                            registros.cargarArchivo();
                            File arch = new File(registros.getLista_archivos().get(getposregistro).getArchivo().getName());
                            RandomAccessFile flujo = new RandomAccessFile(arch, "rw");
                            System.out.println("numero de registros: " + registros.getLista_archivos().get(getposregistro).getNumeroderegistros());
                            registros.getLista_archivos().get(getposregistro).addregistro();
                            flujo.seek(registros.getLista_archivos().get(getposregistro).getNumeroderegistros() * 75);
                            System.out.println("este es el registro que manda :" + registro);
                            flujo.write(registro.getBytes());
                            flujo.close();
                            registro_actual = registros.getLista_archivos().get(getposregistro);
                            System.out.println("este es donde esta registro_actual:" + registro_actual.getArchivo().getAbsolutePath());
                            System.out.println("numero de registros: " + registro_actual.getNumeroderegistros());
                            registros.escribirArchivo();
                            return rrn = registros.getLista_archivos().get(getposregistro).getNumeroderegistros() * 75;//estas lineas devuelven el rrn que es la cantidad de registros *75
                        }
                        //en este es si el registro ya esta creado
                    }
                } finally {

                }*/
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                rrn = (int) archivo_actual.getAvailList().peekFirst();
                RandomAccessFile raf = new RandomAccessFile(new File(GuardarArchivo), "rw");
                raf.seek(((int) archivo_actual.getAvailList().removeFirst() - 1) * tam_registro() + archivo_actual.getSizeMetadata());
                System.out.println("En este RRN lo guarda:" + (((int) archivo_actual.getAvailList().removeFirst() - 1) * tam_registro()) + archivo_actual.getSizeMetadata());
                for (int i = 0; i < archivo_actual.getAvailList().size(); i++) {
                    System.out.println((int) archivo_actual.getAvailList().get(i));
                }
                raf.write(registro.getBytes());
                raf.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return rrn;
    }

    /*public ArbolB getArbol() {
       // return arboles.get(getPosKey());
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_AbrirArchivo;
    private javax.swing.JButton BTN_AbrirBorrarCampo;
    private javax.swing.JButton BTN_AbrirCrearCampo;
    private javax.swing.JButton BTN_AbrirListarCampos;
    private javax.swing.JButton BTN_AbrirModificarCampo;
    private javax.swing.JButton BTN_BorrarCampoDefinitivo;
    private javax.swing.JButton BTN_CancelarBorrarCampo;
    private javax.swing.JButton BTN_CancelarCrearCampo;
    private javax.swing.JButton BTN_CancelarListarCampos;
    private javax.swing.JButton BTN_CancelarModificarCampo;
    private javax.swing.JButton BTN_CerrarArchivo;
    private javax.swing.JButton BTN_CrearCampoDefinitivo;
    private javax.swing.JButton BTN_CrearNuevoArchivo;
    private javax.swing.JButton BTN_ModificarCampoDefinitivo;
    private javax.swing.JButton BTN_SalirPrograma;
    private javax.swing.JButton BTN_SalvarArchivo;
    private javax.swing.JDialog Buscar_registrso;
    private javax.swing.JComboBox<String> CB_CampoABorrar;
    private javax.swing.JComboBox<String> CB_CampoAModificar;
    private javax.swing.JComboBox<String> CB_TipoDeDatoDelCampo;
    private javax.swing.JComboBox<String> CB_TipoDeDatoDelCampoModificado;
    private javax.swing.JDialog Crear_registros;
    private javax.swing.JDialog JD_BorrarCampos;
    private javax.swing.JDialog JD_CrearCampos;
    private javax.swing.JDialog JD_ListarCampos;
    private javax.swing.JDialog JD_ModificarCampos;
    private javax.swing.JLabel JL_1;
    private javax.swing.JLabel JL_10;
    private javax.swing.JLabel JL_11;
    private javax.swing.JLabel JL_12;
    private javax.swing.JLabel JL_13;
    private javax.swing.JLabel JL_14;
    private javax.swing.JLabel JL_15;
    private javax.swing.JLabel JL_16;
    private javax.swing.JLabel JL_17;
    private javax.swing.JLabel JL_18;
    private javax.swing.JLabel JL_19;
    private javax.swing.JLabel JL_2;
    private javax.swing.JLabel JL_20;
    private javax.swing.JLabel JL_21;
    private javax.swing.JLabel JL_22;
    private javax.swing.JLabel JL_23;
    private javax.swing.JLabel JL_24;
    private javax.swing.JLabel JL_3;
    private javax.swing.JLabel JL_32;
    private javax.swing.JLabel JL_33;
    private javax.swing.JLabel JL_4;
    private javax.swing.JLabel JL_5;
    private javax.swing.JLabel JL_6;
    private javax.swing.JLabel JL_7;
    private javax.swing.JLabel JL_8;
    private javax.swing.JLabel JL_9;
    private javax.swing.JDialog Modificar_Registros;
    private javax.swing.JPanel PanelPrincipal;
    private javax.swing.JRadioButton RB_LlavePrimariaDelCampo;
    private javax.swing.JRadioButton RB_LlavePrimariaDelCampoModificado;
    private javax.swing.JSpinner SP_LongitudDelCampo;
    private javax.swing.JSpinner SP_LongitudDelCampoModificado;
    private javax.swing.JTextArea TA_ArchivoAbierto;
    private javax.swing.JTextArea TA_ListarCampos;
    private javax.swing.JTextField TF_NombreDelCampo;
    private javax.swing.JTextField TF_NombreDelCampoModificado;
    private javax.swing.JTable Tabla_buscarregistro;
    private javax.swing.JTable Tabla_modregistros;
    private javax.swing.JFrame VentanaMenuCampos;
    private javax.swing.JButton btn_buscarRegistros;
    private javax.swing.JButton btn_crearRegistros;
    private javax.swing.JComboBox<String> cb_buscar_registro;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JDialog jD_Registros;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jP_CrearCampo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jb_botondefbuscar;
    private javax.swing.JButton jb_buscarllave_mod;
    private javax.swing.JButton jb_defcrearregistro;
    private javax.swing.JButton jb_defmodificar;
    private javax.swing.JButton jb_insertarcolumna;
    private javax.swing.JButton jb_salir_modificar;
    private javax.swing.JButton jb_salirdecrearregistros;
    private javax.swing.JLabel jl_titulodelatabla;
    private javax.swing.JLabel label_llaveaingresar;
    private javax.swing.JTextField modificar_textfield;
    private javax.swing.JTable tabla_registros;
    private javax.swing.JTextField tf_buscarregistro;
    // End of variables declaration//GEN-END:variables
    private Archivo archivo_actual/*, archivo_anterior*/;
    private Campo campo_actual;
    ArrayList<Campo> campos_nuevos = new ArrayList();
    ArrayList<Campo> campos_guardados = new ArrayList();
    Administrar_Archivos aa = new Administrar_Archivos("./Archivos.dmo");
    ArbolB arbol_actual;
    private boolean salvado = false;
    private boolean semodifico = false;
    private boolean secreo = false;
    private boolean seborro = false;
    private String GuardarArchivo;
    ArrayList<Long> rrnsbuscar;
    private int rrnModificar = 0;
    private int rrnabuscar = 0;
    private String espacios = new String(new char[1024]).replace('\0', ' ');
    Adminarboles arboles = new Adminarboles("./Arboles.txt");//el archivo que guarda todos los arboles
    añadirregistros registros = new añadirregistros("./Registros.txt");//el archivo que guarda todos los registros
    private Registro registro_actual;//el registro que se maneja en ejecucion
}
